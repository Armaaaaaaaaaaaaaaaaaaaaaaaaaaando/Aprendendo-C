#include <stdio.h>
#include <string.h>
#include <stdlib.h>

//estrutura principal
struct Employee_records{
    char name[50],CPF[50],email[50],phone_number[50],adress[50],ID[50];
};

//calculo do tamanho do vetor
int size (char vetor[]){
    int i = 0;
    do{
        i++;
    }while(vetor[i] != '\0');
    return i;
}

//analisa o numero de celular
int phoneanalysis(char phone[]){
    int i;
    i = size(phone);
    if(i == 14){
        int exe = 0;
        for(int j =0; j < 14;j++){
            if(phone[j] >= '0' && phone[j] <= '9') exe+=0;
            else exe++;
        }
        if(exe == 3){
            if(phone[3] == '9' && phone[2] == ' ' && phone[4] == ' ' && phone[9] =='-'){
                return 0;
            }
            //se nao encontrar no modelo relatado, o numero nao é aceito
            else return 5;
        }
        //se ele encontrar algo que não seja um numero ele retorna
        else return 5;
    }
    //se nao tiver 14 de tamanho ele retorna o 5, 14 caracteres é o tamanho analisado
    else return 5;
}


//analisa o email
int emailanalysis (char email[]){
    char aux[30];
    int i = 0,k =0;
    //fazer contagem do vetor
    k = size(email);
    //fazer a contagem até o @
    do{
        i++;
        //se o i chegar ao tamanho de k, ele n encontrou o @ e isso n é um email
        if(k == i) return 5;
    }while(email[i] != '@');
    //passa o depois do @ para o aux, para verificar se é gmail
    int j = 0;
    do{
        aux[j] = email[i];
        i++;
        j++;
    }while(email[i] != '\0');
    aux[j] = '\0';
    int compara = strcmp(aux,"@gmail.com");
    return compara;
}


//analisa se o que foi digitado é um cpf
int cpfanalysis (char cpf[]){
    int i = 0;
    //pega o tamanho do cpf
    i = size(cpf);
    if(i != 14) return 1;
    else{
        int aux = 0;
        for(int j= 0; j < 14; j++){
            if(cpf[j] >= '0' && cpf[j] <= '9') aux+=0;
            else aux++;
        }
        if(aux > 3) return 1;
        else{
           //analisa pontos especificos do cpf
            if(cpf[3] != '.' || cpf[7] != '.' || cpf[11] != '-'){
                return 1;
            }
            else{
                return 0;
            }  
        }
    }
}

//com esse modo de leitura posso ler sem me preocupar com buffer
void read(char rea[100]){
    char line[100],car;
    int i = 0;

    do{
        car = getchar();
        line[i] = car;
        i++;
        //coleta os caracteres ate o enter ser digitado
    }while(car != '\n');
    //no final ele incrementa esse simbolo, para evitar o lixo na variavel
    line[i-1] = '\0';
    strcpy(rea,line);
}

//leitura do arquivo
int readfromfile(struct Employee_records workers[100]){
    int how_many;
    char zz[20];
    struct bigvetor{
        char tudao[50];
    };
    char aux[100];
    struct bigvetor a[100];

    FILE *pointer;
    pointer = fopen("Workers records.txt","r");
    //colocar o conteudo lido do arquivo na estrutura bigvetor, para depois distribuir 
    int i = 0;
    while(fgets(aux,100,pointer) != NULL){
        strcpy(a[i].tudao, aux);
        i++;
    }
    fclose(pointer);
    //como é salvo no arquivo Empregados: 3, por exemplo, ele exclui o conteudo até os : para poder usar o 
    //numero no loop de coleta
    int j = 0,g=0;
    do{
        j++;
    }while(a[0].tudao[j] != ':');

    do{
        zz[g] = a[0].tudao[j];
        j++;
    }while(a[0].tudao[j] != '\n');
    how_many = atoi(zz);

    printf("Amount of workers collected from the file: %d\n",how_many);
    //é salvo no arquivo Nome: Armando, por exemplo, ele exclui o conteudo antes de : para utilizar no 
    //programa apenas o necessario que é o nome do trabalhador.
    for (int k = 0; k < i; k++){
        char aux222[30];
        int z=0;
        do{
            z++;
        }while(a[k].tudao[z] != ':');

        int p =0;
        z+=2;
        //após a exclusão ele add o no aux222 para a distribuicao na estrutura
        do{
            aux222[p] = a[k].tudao[z];
            p++;
            z++;
        }while(a[k].tudao[z] != '\0');
        aux222[p] = '\0';
        strcpy(a[k].tudao,aux222);
    }
    //passando as informacoes coletadas para estrutura
    int aux1 = 1;
    for(int i = 0; i < how_many;i++ ){
        strcpy(workers[i].name,a[aux1].tudao);
        aux1++;
        strcpy(workers[i].CPF,a[aux1].tudao);
        aux1++;
        strcpy(workers[i].email,a[aux1].tudao);
        aux1++;
        strcpy(workers[i].phone_number,a[aux1].tudao);
        aux1++;
        strcpy(workers[i].adress,a[aux1].tudao);
        aux1+=2;
    }
    return how_many;
}

//função de salvar no arquivo
void save_on_file(struct Employee_records Employes[],int how_many,int pos_achou, char op,int n){
    printf("OK, let's update your file!\n");
    FILE *pointer;
    pointer = fopen("Workers records.txt","w");
    //duas opções pq uma é salva após ocorrer a exclusão de funcionario e a outra nao
    if(op == '1'){
        fprintf(pointer,"Employees: %d\n",how_many-1);
        for(int i = 0;i < how_many; i++){
            if(i != pos_achou){
                fprintf(pointer,"Name: %s",Employes[i].name);
                fprintf(pointer,"CPF: %s",Employes[i].CPF);
                fprintf(pointer,"Email: %s",Employes[i].email);                              
                fprintf(pointer,"Phone Number: %s",Employes[i].phone_number);
                fprintf(pointer,"Adress: %s",Employes[i].adress);
                fprintf(pointer,"\n");
            } 
        }    
        
    }
    else{
        fprintf(pointer,"Employees: %d\n",how_many);
        for(int i = 0;i < how_many; i++){
            if(n == 1 && i == pos_achou)fprintf(pointer,"Name: %s\n",Employes[i].name);
            else fprintf(pointer,"Name: %s",Employes[i].name);
            fprintf(pointer,"CPF: %s",Employes[i].CPF);
            if(n == 2 && i == pos_achou) fprintf(pointer,"Email: %s\n",Employes[i].email);
            else fprintf(pointer,"Email: %s",Employes[i].email);
            if(n == 3 && i == pos_achou) fprintf(pointer,"Phone Number: %s\n",Employes[i].phone_number);
            else fprintf(pointer,"Phone Number: %s",Employes[i].phone_number);
            if(n == 4 && i == pos_achou) fprintf(pointer,"Adress: %s\n",Employes[i].adress);
            else fprintf(pointer,"Adress: %s",Employes[i].adress);
            fprintf(pointer,"\n");
        }
    }
    fclose(pointer);
}

int main(void){
    char ase[20];
    char menu[50][100] = {"Make your choice","[1] register on file","[2] update workers",
                            "[3] remove worker from the file ","[4] see workers","[0] exit"};

    int formenu = 9;
    do{
        char aux[100];
        int how_many,aux_cpf = 0,aux_email, aux_phone,aux2,*poi;
        //print do menu
        for(int w =0; w<6; w++){
            printf("%s\n",menu[w]);
        }
        printf(": ");

        read(ase);
        formenu = atoi(ase);
        //coleta para determinar as vezes que repetirá
        if(formenu == 1){
            printf("How many employees do you have? ");
            read(aux);
            how_many = atoi(aux);
            struct Employee_records Employes[how_many];

            printf("Let's start with the record!\n");
            for(int i = 0; i < how_many; i++){
                int compara;
                printf("Name: ");
                read(Employes[i].name);
                //nao pode guardar o mesmo cpf mais de uma vez, afinal pessoas so possuem um cpf, com isso
                //a função dowhile abaixo repete até que não seja repetida o cpf
                do{
                    printf("CPF: ");
                    read(Employes[i].CPF);
                    //função que analisa se é um cpf
                    aux_cpf = cpfanalysis(Employes[i].CPF);

                    //se o cpf for digitado incorretamente ele continua no loop
                    while(aux_cpf != 0){
                        printf("Please, write you  r cpf correctly: ");
                        read(Employes[i].CPF);
                        aux_cpf = cpfanalysis(Employes[i].CPF); 
                    }
                    //analise se o cpf já foi escrito anteriormente
                    if(i != 0){
                      for (int j = 0; j < i; j++){
                        compara = strcmp(Employes[i].CPF,Employes[j].CPF);
                        if(compara == 0) break;
                        else compara = 1;
                      }
                      if(compara == 0) printf("This cpf is already in, please write anotherone\n");
                      }
                    else compara = 1; 
                }while(compara == 0);
                //coleta do email
                do{
                    printf("Email(gmail only): ");
                    read(Employes[i].email);
                    aux_email = emailanalysis(Employes[i].email);
                }while(aux_email != 0);
                //coleta do numero
                do{
                    printf("Please, write your phone number like this: 00 9 0000-0000\n");
                    printf("Phone number: ");
                    read(Employes[i].phone_number);
                    aux_phone = phoneanalysis(Employes[i].phone_number);
                }while(aux_phone != 0);
                
                printf("Adress: ");
                read(Employes[i].adress);
            }
            //salvando as informações no arquivo
            printf("OK, let's save your workers\n");
            FILE *pointer;
            pointer = fopen("Workers records.txt","w");
            fprintf(pointer,"Employees: %d\n",how_many);
            for(int i = 0;i < how_many; i++){
                fprintf(pointer,"Name: %s\n",Employes[i].name);
                fprintf(pointer,"CPF: %s\n",Employes[i].CPF);
                fprintf(pointer,"Email: %s\n",Employes[i].email);
                fprintf(pointer,"Phone Number: %s\n",Employes[i].phone_number);
                fprintf(pointer,"Adress: %s\n",Employes[i].adress);
                fprintf(pointer,"\n");
            }  
            fclose(pointer);
        }

        else if(formenu == 2){
            int how_many,i;
            struct Employee_records workers[100];
            //manda pra funcao para ler as informacoes do arquivo e passa-las a um vetor local 
            //e estabelecendo a quantidade de trabalhadores atraves do howmany
            how_many = readfromfile(workers);

            if(how_many == 0){
                printf("Error! File doesnt exist or is empty\n");
                return 0;
            }

            for(i = 0; i < how_many; i++){
                printf("%d. %s",i+1,workers[i].CPF);
            }
            char up[20];
            int d;
            
            printf("Who you want to updade: ");
            read(up);
            int w =0;
            do{
                w++;
            }while(up[w] != '\0');
            up[w] = '\n';
            int achou =0, pos_achou;
            i = 0;
            //procura o cpf digitado na estrutura para ver se ele está cadastrado, se sim, pega sua posicao
            do{
                int compara = strcmp(up,workers[i].CPF);
                if(compara == 0){
                    achou++;
                    pos_achou = i;
                }
                i++;
            }while(workers[i].CPF[3] == '.');

            if(achou == 1){
                int n;
                printf("What do you want do update: \n");
                char menu2[20][70] = {"[1] Name","[2] Email","[3] Phone number","[4] Adress"},update[10];
                for(int j = 0; j < 4;j++){
                    printf("%s\n",menu2[j]);
                }
                printf(": ");
                read(update);
                n = atoi(update);
                if (n == 1){
                    int sz;
                    printf("New name: ");
                    read(workers[pos_achou].name);
                    sz = size(workers[pos_achou].name);
                    workers[pos_achou].name[sz] = '\0';
                }
                else if(n == 2){
                    int sz;
                    do{
                        printf("New Email (Remember, Gmail only): ");
                        read(workers[pos_achou].email);
                        aux_email = emailanalysis(workers[pos_achou].email);
                    }while(aux_email != 0);
                    sz = size(workers[pos_achou].email);
                    workers[pos_achou].email[sz] = '\0';
                }
                else if(n== 3){
                    int sz;
                    do{
                        printf("New phone number (remember the style 00 9 0000-0000): ");
                        read(workers[pos_achou].phone_number);
                        aux_phone = phoneanalysis(workers[pos_achou].phone_number);
                    }while(aux_phone != 0);
                    sz = size(workers[pos_achou].phone_number);
                    workers[pos_achou].phone_number[sz] = '\0';
                }
                else if(n == 4){
                    printf("New Adress: ");
                    read(workers[pos_achou].adress);
                    int sz;
                    sz = size(workers[pos_achou].adress);
                    workers[pos_achou].adress[sz] = '\0';

                }
                char op = '2';
                //manda o op para informar que o modo de print no arquivo é de atualização 
                save_on_file(workers,how_many,pos_achou,op,n);
            }
            else printf(" can't find this cpf!\n",d);

        }
        else if(formenu == 3){
            int how_many;
            char delete[20];
            struct Employee_records workers[100];
            how_many = readfromfile(workers);
            //se n vim nada do arquivo ou se ele n existir o howmany receberá 0, forçando o fechamento do programa
            if(how_many == 0){
                printf("Error! File doesnt exist or is empty\n");
                return 0;
            }
            //printa os cpfs cadastrado
            for(int i = 0;i < how_many; i++){
                printf("%d. %s",i+1,workers[i].CPF);
            }
            read(delete);
            int w =0;
            //colocando o \n no final, já que perde quando transfere pro vetor. ele é importante para a formatação
            //no arquivo
            do{
                w++;
            }while(delete[w] != '\0');
            delete[w] = '\n';

            int i = 0,achou=0,pos_achou;
            do{
                int compara = strcmp(delete,workers[i].CPF);
                if(compara == 0){
                    achou++;
                    pos_achou = i;
                }
                i++;
            }while(workers[i].CPF[3] == '.');

            if(achou != 0){
                char op = '1';
                int n =0;
                save_on_file(workers, how_many, pos_achou,op,n);
                printf("Worker removed succefully!\n");
            }
            else printf("can't find it\n");

        }
        else if(formenu == 4){
          struct Employee_records workers[100];
          how_many = readfromfile(workers);
          if(how_many == 0){
                printf("Error! File doesnt exist or is empty\n");
                return 0;
            }
          printf("Employees: %d\n",how_many);
          for(int i = 0;i < how_many; i++){
            printf("Name: %s",workers[i].name);
            printf("CPF: %s",workers[i].CPF);
            printf("Email: %s",workers[i].email);
            printf("Phone Number: %s",workers[i].phone_number);
            printf("Adress: %s",workers[i].adress);
            printf("\n");
          }
        }
        else if(formenu == 0) break;
    }while(formenu != 8);
    return 0;
} 
